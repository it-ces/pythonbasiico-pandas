#! /usr/local/bin/python3
r"""Test cases
>>> run_answer()
('0', ['C'])
('1', ['E', 'B', 'D', 'A', 'A', 'E'])
('2', ['A', 'E', 'D'])
('3', ['A', 'B', 'D', 'E', 'E'])
('4', ['E', 'B'])
('5', ['B', 'C', 'D', 'D', 'E', 'E', 'E'])
('6', ['C', 'E', 'A', 'B'])
('7', ['A', 'C', 'E', 'D'])
('8', ['E', 'E', 'A', 'B'])
('9', ['A', 'B', 'E', 'C'])

"""
import doctest
import subprocess

def run_answer():
    '''Codigo especifico para ejecutar la respuesta'''
    #----------------------------------------------------------------------------------------------
    # Ejecuta el cÃ³digo del estudiante
    #----------------------------------------------------------------------------------------------
    answer = open('question.py', 'rt', encoding='utf-8').readlines()
    answer = [row for row in  answer if len(row) >= 2 and row[0:2] != '##']
    answer = '\n'.join(answer)
    return exec(answer)

#--------------------------------------------------------------------------------------------------
# Grader (generic)
#--------------------------------------------------------------------------------------------------
subprocess.run(['rm', '-f', '_SUCCESS']) # borra el flag de exito de la corrida
RESULT = doctest.testmod()               # ejecuta el doctest
FAIL, _ = RESULT                         # fail, total
if FAIL == 0:                            # grading
    open('_SUCCESS', 'a').close()        #
else:
    print('\n')
#--------------------------------------------------------------------------------------------------
